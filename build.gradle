
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {

            name = "Modmuss50"
            url = "http://maven.modmuss50.me/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT"

    }
}
apply plugin: "maven"
apply plugin: 'net.minecraftforge.gradle.forge'

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = "1.9.4-1.0.0"
group= "com.crytekteam.crytek"
archivesBaseName = "Crytek"

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
    version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

minecraft {
    version = "12.17.0.1976-1.9.4"
    if(ENV.JOB_BASE_NAME == "Crytek-1.10"){
	    version = "1.10-12.18.0.2000-1.10.0"
	}
    runDir = "run"
    mappings = "snapshot_20160518"
}

repositories {
    maven {
		name = "Dankhax"
        url = "http://maven.epoxide.xyz"
    }

    maven {
        name = "prog"
        url = "http://dvs1.progwml6.com/files/maven"
    }

    maven {
		name = "tterrag"
        url = "http://maven.tterrag.com/"
    }
}

dependencies {
	deobfCompile "mezz.jei:jei_1.9.4:+"
	deobfCompile "mcjty.theoneprobe:TheOneProbe:1.9.4-1.0.4-14"
    compile "net.darkhax.tesla:Tesla:1.9.4-1.1.0.24"
	compile "mcp.mobius.waila:Waila:1.7.10-B3_1.9.4"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            //This is used when the build is done on a slave node
		if (project.hasProperty('mavenPass'))
        {
			println 'Uploading to remote Maven Repo'
            repository(url: "http://mavenupload.modmuss50.me/") {
                authentication(userName: "buildslave", password: project.getProperty('mavenPass'))
            }
        }
        else
        { 
			//this is when the build is executed on the master node
			println 'Uploading to local Maven Repo'
           repository(url: "file:///var/www/maven/")
        }
            pom {
                groupId = "CrystekTeam"
                version = project.version
                artifactId = project.archivesBaseName
                project {
                    name project.archivesBaseName
                    packaging 'jar'
                    description 'CrystekTeam'
                    url 'https://github.com/CrystekTeam/Crystek'
                    scm {
                        url 'https://github.com/CrystekTeam/Crystek/'
                        connection 'scm:git:git@github.com:CrystekTeam/Crystek.git'
                        developerConnection 'scm:git:git@github.com:CrystekTeam/Crystek.git'
                    }
                    issueManagement {
                        system 'github'
                        url 'https://github.com/CrystekTeam/Crystek/issues'
                    }
                    licenses {
                        license {
                            name 'License'
                            url 'https://github.com/CrystekTeam/Crystek/blob/master/LICENSE-Code'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'Gigabit101'
                            name 'Gigabit101'
                            roles { role 'developer' }
                        }
                    }
                }
            }
        }
    }
}
